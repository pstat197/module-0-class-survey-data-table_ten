---
title: "Analysis of class surveys"
subtitle: "If you want a subtitle put it here"
author: "List names here"
date: last-modified
published-title: "Updated"
editor: visual
format: html
code-copy: true
execute:
  message: false
  warning: false
  echo: false
  cache: true
---

Use this as a template. Keep the headers and remove all other text. Overall, your report may be quite short. When it is complete, render and then push changes to your team repository.

```{r}
# load any other packages and read data here
library(tidyverse)
library(ggplot2)
library(dplyr)
library(scales)

# URL Read
url <- 'https://raw.githubusercontent.com/pstat197/pstat197a/main/materials/labs/lab2-tidyverse/data/'

background <- paste(url, 'background-clean.csv', sep = '') %>%
  read_csv()

interest <- paste(url, 'interest-clean.csv', sep = '') %>%
  read_csv()

metadata <- paste(url, 'survey-metadata.csv', sep = '') %>%
  read_csv()

interest$lang[interest$response_id == 29] <- "Python"
interest$dom[interest$response_id == 29] <- "Technology;Software development;Product engineering"


# Local Machine Read
background <- read_csv('../data/background-clean.csv')
interest <- read_csv('../data/interest-clean.csv')

all_data <- background %>% inner_join(interest, by = join_by(response_id)) %>% rename(c(domain_yn = dom.x, domain_type = dom.y, research_or_industry = do_you_have_any_preference_regarding_working_on_an_industry_project_or_a_research_lab_project))

all_data$lang[all_data$response_id == 29] <- "Python"
```

## Executive summary

Write a one-paragraph abstract summarizing what you did and your findings. It need not be comprehensive; try to highlight the most important or interesting outcomes.

## Data description

-   **Source:** Survey distributed to all students offered enrollment in **PSTAT197A, Fall 2025**.

-   **Sample Size:** 𝑛 = 60 responses.

-   **Sampling:** No random selection. Can be considered:

    -   A census of PSTAT197A enrollees, or

    -   A convenience sample of students interested in **data science/capstones**.

**Sample Characteristics:**

| Characteristic       | Count | Percent |
|----------------------|-------|---------|
| **Class Standing**   |       |         |
| Junior               | 9     | 15%     |
| Senior               | 51    | 85%     |
| **Gender Identity**  |       |         |
| Female               | 28    | 46.7%   |
| Male                 | 32    | 53.3%   |
| **Race / Ethnicity** |       |         |
| Asian                | 43    | 71.7%   |
| Caucasian            | 13    | 21.7%   |
| Multiracial          | 3     | 5%      |
| Prefer not to say    | 1     | 1.7%    |

**Consent for sharing:**

| Share background | Share project preferences | Count |
|------------------|---------------------------|-------|
| Yes              | Yes                       | 49    |
| Yes              | No                        | 2     |
| No               | Yes                       | 3     |
| No               | No                        | 6     |

**Measurements Collected:**

-   **Self-reported proficiency** in programming, math, and statistics: `beg`, `int`, `adv`.

-   **Comfort levels** (numeric scale 1–5) in programming (`prog.comf`), math (`math.comf`), statistics (`stat.comf`).

-   **Course history:** Counts of courses taken in departments like PSTAT, CS, LING, ECON.

-   **Past research experience**, project preferences, and demographic info.

**Notes on the dataset:**

-   Personal information, free-text responses, and students who did not consent were removed.

-   Some variables, like distinctions in research experiences, were simplified for analysis.

**Summary Statistics:**

| Variable  | Mean | Median | Min | Max |
|-----------|------|--------|-----|-----|
| prog.comf | 3.86 | 4      | 2   | 5   |
| math.comf | 4.04 | 4      | 3   | 5   |
| stat.comf | 4.04 | 4      | 2   | 5   |

-   Proficiency levels (numeric) roughly align with comfort ratings:

    -   `prog`: 2.9 (mean)

    -   `math`: 2.78

    -   `stat`: 2.83

## Questions of interest

Indicate the questions your analysis addresses. These should map one-to-one to your findings. Don't include questions you didn't answer or questions you started with and refined later. If you would rather frame them as goals or tasks rather than questions that is okay; just modify the header appropriately. However you frame what you've done, you may only have two or three items; that is fine. Provide an itemized or numbered list so that the reader can easily identify your objectives.

Does a student’s preferred programming language (R, Python, or no preference) influence their self-reported proficiency and comfort in programming and math? We sought to understand how students’ programming language preferences relate to their academic background, skills, and project interests. In particular, we examined whether language preference aligns with coursework patterns in different departments, students’ domain interests, project type preferences (industry vs. research), class level or standing, and overall academic background. Our analysis addressed the following questions: 1. How does students’ academic background and preparation relate to their programming language preference? 2. How do students’ programming language preferences influence their interests and coursework choices?

## Findings

Summarize your results. Don't try to explain every step you took; focus instead on providing the main data analytic outputs -- tables and figures -- and explaining clearly what they show. Clarify any important decisions you made in obtaining them. You can display codes if you like but it is not necessary.

The following analyses examine how students’ programming language preference (R, Python, or No preference) relates to their proficiency and comfort in programming and math.

**Comfort and Proficiency by Language**

We first converted students’ self-reported proficiency levels in programming and math into numeric scores (1 = beginner, 2 = intermediate, 3 = advanced) and combined them with their comfort scores. The table below shows the ANOVA results testing for differences in these scores by language preference:

```{r}
background <- read_csv("../data/background-clean.csv")
interest   <- read_csv("../data/interest-clean.csv")

# Inner join by response ID
data <- inner_join(background, interest, by = "response_id")

# Only select needed columns
data <- data %>%
  select(lang, prog.prof, prog.comf, math.prof, math.comf)

library(dplyr)

# Turn text proficiency levels into numbers
data <- data %>%
  mutate(
    prog.prof.num = recode(prog.prof, "beg" = 1, "int" = 2, "adv" = 3
    ),
    math.prof.num = recode(math.prof, "beg" = 1, "int" = 2, "adv" = 3
    )
  )

# Pivot longer
data_long <- data %>%
  pivot_longer(
    cols = c(prog.prof.num, prog.comf, math.prof.num, math.comf),
    names_to = "skill_type",
    values_to = "score"
  ) %>%
  mutate(
    skill_type = recode(skill_type,
                        "prog.prof.num" = "Programming Proficiency",
                        "prog.comf" = "Programming Comfort",
                        "math.prof.num" = "Math Proficiency",
                        "math.comf" = "Math Comfort")
  )

# Run ANOVA: Does comfort/proficiency differ by language?
anova_result <- aov(score ~ lang * skill_type, data = data_long)
summary(anova_result)
```

The ANOVA indicates that **there is a significant difference between skill types** (Programming vs Math, Proficiency vs Comfort), but **no significant differences between languages** or their interaction with skill type. In other words, students’ comfort and proficiency levels are fairly similar across those preferring R, Python, or having no preference.

**Visualization**

The boxplot below illustrates the distributions of programming and math comfort and proficiency scores by language preference:

```{r}
# Visualize mean differences
ggplot(data_long, aes(x = lang, y = score, fill = skill_type)) +
  geom_boxplot() +
  labs(
    title = "Comfort and Proficiency by Language Preference",
    x = "Language Preference",
    y = "Score (1–5 scale or recoded proficiency)",
    fill = "Skill Type"
  ) +
  theme_minimal()
```

From the plot, we see that **median scores are similar across language preferences** for both programming and math. Programming proficiency and comfort are slightly higher on average than math scores, consistent with the overall skill distribution in the class. The following chart displays the distribution of students that prefer each programming language in the class. As shown, a majority of students (around 60%) prefer Python, around 22% of students are not partial toward either language, and around 18% of the class prefers R.

```{r}
lang_summary <- all_data %>%
  count(lang) %>%
  mutate(prop = n / sum(n)) %>%
  arrange(desc(prop))

## Bar Chart Of Language Preference w/ Percents

ggplot(lang_summary, aes(x = reorder(lang, -prop), y = prop, fill = lang)) +
  geom_col() +
  geom_text(aes(label = scales::percent(prop, accuracy = 0.1)), 
            vjust = -0.5, size = 4) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Proportions of Language Preference",
    x = "Preferred Language",
    y = "Percentage"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

The bar chart below illustrates the relationship between students’ project type preferences and their preferred programming language. The figure shows that a majority of those who prefer Python (79%) prefer to work on an industry-sponsored project, whereas a majority of students that prefer R either do not prefer one type of project over another. This may be due to the fact that Python is more prevalent in the industry, so students who prefer Python are more likely to seek industry-sponsored projects rather that research-based projects, which tend to use R.

```{r}
plot_data <- all_data %>%
  count(lang, type) %>%
  group_by(lang) %>%
  mutate(prop = n / sum(n))

# Distribution of those who prefer each type of Project
# By Language Preference
ggplot(plot_data, aes(x = lang, y = prop, fill = type)) +
  geom_col(position = "fill") +
  geom_text(
    aes(label = percent(prop, accuracy = 1)),
    position = position_fill(vjust = 0.5),
    size = 4
  ) +
  labs(
    title = "Project Type Preference by Language Preference",
    x = "Preferred Language",
    y = "Proportion",
    fill = "Project Type Preference"
  ) +
  scale_y_continuous(labels = percent) +
  theme_minimal()

```

The following chart shows that programming language preference is associated with coursework patterns. Students preferring R have taken more PSTAT courses (5.22 average) compared to Python-preferring students (4.55), showing more PSTAT coursework and experience is correlated with R preference. Conversely, Python-preferring students have completed more CS courses (1.52 vs. 1.11), aligning with Python's prominence in computer science. ECON and LING courses show less variation across language preferences, suggesting they don't heavily influence language choice. Overall, the data indicates that students' language preferences reflect their disciplinary preparation.

```{r}
# course groups from list
course_cols <- c("PSTAT100", "PSTAT115", "PSTAT120", "PSTAT122", "PSTAT126", 
                 "PSTAT131", "PSTAT160", "PSTAT174", "CS9", "CS16", "LING104", 
                 "LING110", "LING111", "CS130", "CS165", "ECON145", "PSTAT127", 
                 "PSTAT134", "CS5")

pstat_courses <- c("PSTAT100", "PSTAT115", "PSTAT120", "PSTAT122", "PSTAT126", 
                   "PSTAT131", "PSTAT160", "PSTAT174", "PSTAT127", "PSTAT134")
cs_courses <- c("CS9", "CS16", "CS130", "CS165", "CS5")
ling_courses <- c("LING104", "LING110", "LING111")
econ_courses <- c("ECON145")

# average number of courses taken by language preference
# more CS courses -> Python
# more PSTAT, Ling --> R

course_averages <- all_data %>%
  filter(lang %in% c("R", "Python", "No preference")) %>%
  mutate(
    pstat_total = rowSums(select(., all_of(pstat_courses)), na.rm = TRUE),
    cs_total = rowSums(select(., all_of(cs_courses)), na.rm = TRUE),
    ling_total = rowSums(select(., all_of(ling_courses)), na.rm = TRUE),
    econ_total = rowSums(select(., all_of(econ_courses)), na.rm = TRUE)
  ) %>%
  group_by(lang) %>%
  summarise(
    n = n(),
    avg_pstat = mean(pstat_total, na.rm = TRUE),
    avg_cs = mean(cs_total, na.rm = TRUE),
    avg_ling = mean(ling_total, na.rm = TRUE),
    avg_econ = mean(econ_total, na.rm = TRUE),
    avg_total = mean(pstat_total + cs_total + ling_total + econ_total, na.rm = TRUE)
  )

course_avg_long <- course_averages %>%
  select(lang, avg_pstat, avg_cs, avg_ling, avg_econ) %>%
  pivot_longer(cols = starts_with("avg_"), 
               names_to = "course_type", 
               values_to = "avg_courses") %>%
  mutate(course_type = case_when(
    course_type == "avg_pstat" ~ "PSTAT",
    course_type == "avg_cs" ~ "CS",
    course_type == "avg_ling" ~ "LING",
    course_type == "avg_econ" ~ "ECON"
  ))

ggplot(course_avg_long, aes(x = course_type, y = avg_courses, fill = lang)) +
  geom_col(position = "dodge") +
  geom_text(
    aes(label = round(avg_courses, 2)),
    position = position_dodge(width = 0.9),
    vjust = -0.5,
    size = 3.5
  ) +
  labs(
    title = "Average Number of Courses Taken by Language Preference",
    x = "Course Department",
    y = "Average Number of Courses",
    fill = "Language Preference"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```

# Examining Domain Interest & Language Preference

The segment below denotes a stacked barplot, displaying the densities of different domain interests given specific language preferences. A black line has been inserted to illustrate the necessary barrier for performing a Chi-Square Test (domain frequency per language preference must meet/exceed a frequency of 5).

```{r}
# Extract exact columns
consolidated_csv <- interest[3:4]
consolidated_df <- data.frame(consolidated_csv)

#Total Counts for each domain
expanded_df <- consolidated_csv |> 
  separate_rows(dom,sep =";") |>
  mutate(dom = trimws(dom))

# summarize to lang × dom counts 
plot_data <- expanded_df |>
  count(lang, dom, name = "n") |>
  mutate(lang = fct_reorder(lang, n, .fun = sum)) 

# Bar Plot (Frequency + Language)
stacked <- ggplot(plot_data, aes(y = n, x = lang, fill = dom)) +
  geom_col(position = position_dodge(width = 0.9)) +
  labs(title = "Plot 5: Domain Interest by Languge",
       x = "Language Preference", y = "Count", fill = "Domain of Interest") +
theme(legend.position = "right") + geom_hline(yintercept = 5,color="black") 
stacked
```

Examining the exhibits, the observed relationship between language preference and domain interest data appears to be variable and slightly skewed. Specifically, observing Plot 5, there appears to be a larger amount of interest and thus larger amounts of data within Python interest (specifically among Technology and Software Development), while the remaining two categories, still with a considerable density of information, appear greatly spread across all domains.

The following plot represents a transformation of the previous densities in the form of a ratio to visually interpret the variation of domain interests among each language preference group.

```{r}
# Proportions Stacked Barplot
ggplot(expanded_df, aes(x = lang, fill = dom)) +
  geom_bar(position = "fill") +
  labs(title = "Plot 6: Proportion of Domain Interests by Language",
       x = "Language", y = "Proportion", fill = "Domain of Interest") +
  theme_minimal()
```

This relationship between language preference and domain of interest is further illustrated in Plot 6, where similar densities of domain interest in each specific language preference appears more similar by proportional comparison. Going forward, this insight will prove to beneficial as a demonstration of visually-consistent variation among language groups.

The segment below includes the Observed Contingency Table to quantify the eligibility of our data for Chi-Square versus Fisher Tests of Independence.

```{r}
# List of Satisfying
tbl <- table(expanded_df$lang, expanded_df$dom)
chi <- suppressWarnings(chisq.test(tbl))
expected <- as.data.frame(as.table(chi$expected))
observed <- as.data.frame(tbl)


observed <- as.data.frame(tbl)
ggplot(observed, aes(x = Var1, y = Var2, fill = Freq)) +
  geom_tile(color = "grey70") +
  geom_text(aes(label = Freq), size = 3, color = "white") +
  scale_fill_gradient(low = "steelblue4", high = "lightblue") +
  labs(
    title = "Plot 7: Observed Contingency Table (Chi-Square Test Inputs)",
    fill = "Observed Count",
    x = "Language Preference",
    y = "Domain Interest"
  ) +
  theme_minimal()
```

As a preliminary measure to understanding the statistical eligibility for Chi-Square Testing, Plot 3 presents a contingency table for Chi-Square Testing. Hoping to suffice the requirement of $$ x > 5$$ for each cell of x observations between domains and languages, this plot exposes the lack of satisfaction and poses an imminent threat to statistical accuracy. Specifically, we realize 13 among the 45 cells fail to satisfy the Chi-Square Test.

Since the Asymptotic approximation of Chi-Square is not possible with such small frequencies, we defer to the use of the Monte Carlo simulated Chi-Square Test to generate a proportion of simulated statistics across 10,000 contingency tables.

### Statistical Analysis

```{r}
# Monte Carlo Simulation Chi-Square Test
chi_sim <- chisq.test(tbl, simulate.p.value = TRUE, B = 10000)
print(chi_sim)
```

This result has yielded a p-value of $$p = 0.6478$$, proving that our observed statistic reinforces the result that there is no statistically significant association between programming language preference and domain of interest. Albeit selected under such circumstances, potential drawbacks include a loss of randomness derived in bootstrapping and computational intensity. While the size of the data is relatively small, considering its observations contain the sole interests of the 2025 Capstone Cohort, perhaps this sparseness could be combated in the future with data aggregation across multiple term cohorts.
